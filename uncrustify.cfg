# Uncrustify Config for User Style Example
# Based on Uncrustify-0.80.1_f defaults and user preferences

#===============================================================================
# General options
#===============================================================================
newlines                        = lf       # Use lf (Unix) - change to crlf if needed
input_tab_size                  = 4       # Assume input uses tabs equivalent to 4 spaces
output_tab_size                 = 4       # Use 4 spaces for output indentation (used if align_with_tabs=true)

#===============================================================================
# Spacing options
#===============================================================================

# --- Around Operators ---
sp_arith                        = force    # Force space around arithmetic (+, -, /, *)
sp_assign                       = force    # Force space around assignment (=, +=)
sp_bool                         = force    # Force space around boolean (&&, ||)
sp_compare                      = force    # Force space around comparison (<, >, ==)
sp_cond_colon                   = force    # Force space around ':' in ternary op
sp_cond_question                = force    # Force space around '?' in ternary op

# --- Pointer/Reference Spacing ---
# Target: Data * p
sp_before_ptr_star              = force    # Force space BEFORE *
sp_after_ptr_star               = force    # Force space AFTER *
sp_between_ptr_star             = remove   # No space between multiple stars (int**)
sp_before_byref                 = force    # Force space BEFORE & (for consistency)
sp_after_byref                  = force    # Force space AFTER & (for consistency)

# --- Parentheses Spacing ---
sp_inside_paren                 = remove   # No space inside () - e.g., ( foo ) -> (foo)
sp_paren_paren                  = remove   # No space between nested parens - e.g., ( (x) ) -> ((x))
sp_cparen_oparen                = remove   # No space between back-to-back parens - e.g., ) ( -> ) ( (default behavior often OK)
sp_paren_brace                  = force    # Force space between ) and { - e.g., ) {
sp_before_sparen                = force    # Force space before ( in control statements (if, for, while...)
sp_inside_sparen                = remove   # No space inside control statement ()
sp_after_sparen                 = add      # Add space after ) of control statements (before brace or statement)
sp_sparen_brace                 = force    # Force space between control ) and { - e.g., ) {

# --- Function related Spacing ---
sp_func_proto_paren             = remove   # No space between function name and ( in proto: myFunc()
sp_func_def_paren               = remove   # No space between function name and ( in definition: myFunc()
sp_inside_fparen                = remove   # No space inside function definition/declaration parens: (int x)
sp_inside_fparens               = remove   # No space inside empty function def/decl parens: ()
sp_square_fparen                = remove   # No space between ] and ( in func call: arr[x]()
sp_fparen_brace                 = force    # Force space between function ) and { - This applies when the { is NOT on a new line. Correct based on your `) {` requirement.

# --- Call related Spacing ---
sp_func_call_paren              = remove   # No space between function name and ( in call: myFunc()
sp_inside_rparen                = remove   # No space inside function call (): myFunc(arg1, arg2)

# --- Braces Spacing ---
sp_brace_brace                  = ignore   # Let newline/indent rules handle {{
sp_before_brace_open            = ignore   # Let newline rules handle
sp_after_brace_open             = ignore   # Let newline rules handle
sp_word_brace_ns                = force    # Force space between namespace name and {

# --- Comma Spacing ---
# Target: foo(x , y)
sp_before_comma                 = force    # Force space BEFORE comma
sp_after_comma                  = force    # Force space AFTER comma
sp_paren_comma                  = force    # Ensure space after '(' if comma follows immediately: '( , foo' -> '(, foo' if force/remove, '( , foo' if add. Force matches no inner space.

# --- Other Spacing ---
sp_after_type                   = force    # Force space after type names (int x)
sp_before_semi                  = remove   # No space before ;
sp_after_semi                   = add      # Add space after ; (unless newline follows)
sp_after_cast                   = add      # Add space after C-style cast: (int) x
sp_before_case_colon            = remove   # No space before : in case labels: case FOO:
sp_return_paren                 = add      # Add space between return and (: return (x)
sp_attribute_paren              = remove   # No space between __attribute__ and (
sp_after_oc_colon               = force    # ObjC: Force space after ':' in message spec
sp_before_oc_colon              = remove   # ObjC: No space before ':' in message spec


#===============================================================================
# Indenting options
#===============================================================================
indent_align_paren              = false
indent_columns                  = 4        # Indent by 4 spaces
indent_with_tabs                = 0        # Use spaces for indentation (0=spaces, 1=tabs>brace, 2=tabs)
indent_brace                    = 0        # Indent { by 0 columns relative to context
indent_braces                   = false    # Don't indent braces relative to definition/statement
indent_namespace                = true     # Indent content within namespaces
indent_class                    = true     # Indent content within classes
indent_class_colon              = true     # Indent items after public/private: labels
indent_access_spec              = 1        # Indent access specifiers (public:) slightly (1 space relative)
indent_access_spec_body         = false    # Don't indent body after access specifier extra level
indent_switch_case              = 4        # Indent 'case' 4 spaces from 'switch'
indent_switch_body              = 4        # Indent statements before first case by 4 spaces
indent_case_brace               = 0        # Indent case { by 0 columns relative to case
indent_func_def_force_col1      = false    # Don't force function defs to start at col 1

# --- Parameter Indentation ---
# Target: Single indent for parameters
indent_func_def_param           = true     # Enable parameter indentation logic for definitions
indent_func_proto_param         = true     # Enable parameter indentation logic for prototypes/declarations
indent_func_param_double        = false    # Disable extra ("double") indentation for parameters
indent_continue                 = 0        # Set continuation indent to 0 globally (use with caution, test needed)
indent_paren_nl                 = false     # Indent line after '(' to align with paren content
indent_paren_close              = 2        # Indent ')' to Brace level (should match parameter indent)

# --- Other Indentation ---
indent_member                   = 4        # Indent continued member access (-> or .) by 4 spaces
indent_label                    = 1        # Indent labels (like 'case:','goto:') 1 space past level (effectively -3 relative to case indent)
indent_extern                   = true     # Indent extern "C" blocks
indent_cmt_with_tabs            = false    # Don't use tabs in comments for indenting
indent_align_string             = false    # Don't specifically align multi-line strings
indent_xml_string               = 0

#===============================================================================
# Newline adding and removing options
#===============================================================================
nl_collapse_empty_body          = false    # Don't collapse {} to {};
nl_collapse_empty_body_functions = false   # Don't collapse empty function bodies

# --- Brace Newlines ---
# Target: Allman braces for blocks, but specific style for function def ) {
# --- 确保函数调用参数列表相关的换行规则不是 "force" 或 "add" ---
# 这些应该允许 "ignore"，这样只有当行太长时才换行
nl_func_call_start              = ignore   # 不要在 '(' 后强制换行 (除非必要)
nl_func_call_args               = remove   # 不要在 ',' 后强制换行 (除非必要)
nl_func_call_end                = ignore   # 不要在 ')' 前强制换行 (除非必要)
nl_fdef_brace                   = remove   # NO newline before function definition { (part of `) {`)
nl_if_brace                     = add      # Add newline before if {
nl_for_brace                    = add      # Add newline before for {
nl_while_brace                  = add      # Add newline before while {
nl_do_brace                     = add      # Add newline before do {
nl_switch_brace                 = add      # Add newline before switch {
nl_enum_brace                   = add      # Add newline before enum {
nl_struct_brace                 = add      # Add newline before struct {
nl_union_brace                  = add      # Add newline before union {
nl_class_brace                  = add      # Add newline before class {
nl_namespace_brace              = add      # Add newline before namespace {
nl_catch_brace                  = add      # Add newline before catch {
nl_finally_brace                = add      # Add newline before finally {
nl_try_brace                    = add      # Add newline before try {
nl_getset_brace                 = add      # Add newline before get/set {
nl_assign_leave_one_liners      = false    # Don't leave one-liners on a single line
# Target: Newline between } and else/catch/finally
nl_brace_else                   = add
nl_brace_catch                  = add
nl_brace_finally                = add
nl_brace_while                  = remove   # No newline before while in do-while

# --- Function Definition/Declaration Newlines ---
# Target: ret_t \n name( \n T x \n ) {
nl_func_type_name               = add      # Add newline between return type and function name
nl_func_def_start               = add      # Add newline after ( in definition
nl_func_decl_start              = add      # Add newline after ( in declaration
nl_func_def_args                = add      # Add newline after comma between args in definition
nl_func_decl_args               = add      # Add newline after comma between args in declaration
nl_func_def_end                 = add      # Add newline before ) in definition
nl_func_decl_end                = add      # Add newline before ) in declaration
nl_func_call_start_multi_line   = true
nl_func_call_end_multi_line     = true    # <--- 确保为 true
nl_func_call_args_multi_line    = false
# --- Other Newlines ---
nl_after_case                   = true     # Add newline after case statement body
nl_case_colon_brace             = add      # Add newline between case X: and {
nl_before_case                  = true     # Add newline before case statement (unless after {)
nl_namespace_two_to_one_liner   = false    # Don't collapse namespaces
nl_create_if_one_liner          = false    # Don't create one-liner ifs
nl_create_for_one_liner         = false    # Don't create one-liner fors
nl_create_while_one_liner       = false    # Don't create one-liner whiles
nl_after_semicolon              = true     # Add newline after most semicolons
nl_end_of_file                  = force    # Ensure newline at end of file
nl_end_of_file_min              = 1        # Ensure at least 1 newline at end

# --- Typedef Newline ---
# nl_after_typedef was unknown. This specific newline might not be possible.
# We rely on standard function pointer formatting rules.

# --- Blank Lines ---
nl_max                          = 2        # Max 2 consecutive newlines (1 blank line)
nl_before_func_body_def         = 1        # Min 1 blank line before function definitions
nl_before_func_body_proto       = 1        # Min 1 blank line before function prototypes
nl_after_func_body              = 1        # Min 1 blank line after function definitions
nl_after_struct                 = 1        # Min 1 blank line after struct/union/enum def
nl_after_class                  = 1        # Min 1 blank line after class def
eat_blanks_after_open_brace     = true     # Remove blank lines after {
eat_blanks_before_close_brace   = true     # Remove blank lines before }

#===============================================================================
# Positioning options
#===============================================================================
pos_assign                      = trail    # Break lines BEFORE assignment operators if needed
pos_conditional                 = trail    # Break lines BEFORE ? and : if needed
pos_comma                       = trail    # Break lines BEFORE commas if needed
pos_bool                        = join    # Break lines BEFORE && and || if needed
pos_compare                     = join    # Break lines BEFORE comparison ops if needed
pos_arith                       = join    # Break lines BEFORE arithmetic ops if needed

#===============================================================================
# Line splitting options
#===============================================================================
code_width                      = 80      # Try to limit code width (adjust as desired)
ls_func_split_full              = false     # Aggressively split function calls/protos at commas if needed
ls_code_width                   = false    # Don't prioritize splitting simply to meet code_width exactly

#===============================================================================
# Code alignment options
#===============================================================================
align_with_tabs                 = false    # Use spaces for alignment padding
align_on_tabstop                = false    # Don't force alignment to fall on tabstop columns
align_keep_tabs                 = false    # Remove non-indenting tabs

# --- Function Parameter Alignment ---
align_func_params               = true     # Align parameters in function defs/protos
align_func_params_span          = 16        # Align if params are within 5 lines
align_func_params_thresh        = 0        # Align even if names are far apart
align_func_params_gap           = 2        # Minimum 2 spaces after type/ptr part

# --- Struct/Class Member Alignment ---
# Use align_var_struct_... for struct members
align_var_struct_span           = 2        # Align struct members if 2+ consecutive
align_var_struct_thresh         = 0        # Align even if far apart
align_var_struct_gap            = 2        # Minimum 2 spaces after type/ptr
# Use align_var_class_... for class members
align_var_class_span            = 2        # Align class members if 2+ consecutive
align_var_class_thresh          = 1        # Align even if far apart
align_var_class_gap             = 2        # Minimum 2 spaces after type/ptr

# --- Variable Definition Alignment (Locals/Globals) ---
align_var_def_span              = 2        # Align local/global vars if 2+ consecutive
align_var_def_thresh            = 1        # Align even if far apart
align_var_def_gap               = 2        # Minimum 2 spaces after type/ptr
align_var_def_colon             = true     # Align colon in bitfields

# --- Pointer/Reference Style for Alignment ---
# Affects var_def, var_struct, var_class, func_proto, typedef alignment
align_var_struct_star_style = 0
align_var_def_star_style        = 0        # Align as: Type * Name
align_var_def_amp_style         = 0        # Align as: Type & Name
align_func_proto_star_style     = 0        # Align as: Type * Name()
align_func_proto_amp_style      = 0        # Align as: Type & Name()
align_typedef_star_style        = 0        # Align as: typedef Type * Name;
align_typedef_amp_style         = 0        # Align as: typedef Type & Name;

# --- Assignment Alignment ---
align_assign_span               = 1        # Align consecutive assignments
align_assign_thresh             = 1        # Align even if far apart

# --- Typedef Alignment ---
align_typedef_span              = 2        # Align consecutive typedefs
align_typedef_gap               = 2        # Min 2 spaces gap
align_typedef_func              = 2        # Align func typedef name with other typedef names

# --- Comment Alignment ---
align_right_cmt_span            = 3        # Align trailing comments within 3 lines
align_right_cmt_gap             = 2        # Min 2 spaces before aligned comment

#===============================================================================
# Comment modification options
#===============================================================================
cmt_width                       = 100      # Try to wrap comments (adjust as desired)
cmt_reflow_mode                 = 0        # No comment reflowing (safer default)
cmt_convert_tab_to_spaces       = true     # Convert tabs to spaces in comments
cmt_star_cont                   = true     # Add leading * to multi-line block comments

#===============================================================================
# Code modifying options (non-whitespace)
#===============================================================================
mod_full_brace_do               = add      # Add braces for do-while
mod_full_brace_for              = add      #

# (Continuing from the previous section)
mod_full_brace_for              = add      # Add braces for for loops
mod_full_brace_if               = add      # Add braces for if statements (even single line)
mod_full_brace_while            = add      # Add braces for while loops
mod_full_brace_using            = add      # Add braces for C# using blocks (if applicable)
mod_paren_on_return             = remove   # Remove unnecessary parens: return (foo); -> return foo;
mod_remove_extra_semicolon      = true     # Remove ;;
mod_move_case_break             = false    # Don't move break into case {}
mod_move_case_return            = false    # Don't move return into case {}
mod_case_brace                  = ignore   # Don't force/remove braces on case blocks automatically (use indent/nl rules)
mod_remove_empty_return         = true     # Remove 'return;' if it's the last statement in a void function

#===============================================================================
# Preprocessor options
#===============================================================================
pp_indent_with_tabs             = -1       # Use indent_with_tabs setting (which is 0=spaces)
pp_indent                       = add      # Indent preprocessor directives within #if blocks
pp_indent_at_level              = false    # Indent #if/#else/#endif from column 1 if at brace level 0
pp_indent_count                 = 4        # Indent preprocessor directives by 1 space per level (when indented)
pp_define_at_level              = false    # Indent #define from column 1
pp_include_at_level             = true     # Indent #include based on brace level
pp_space_after                  = add      # Add space after # based on level (use with pp_space_count)
pp_space_count                  = 1        # Add 1 space per level after #
pp_align_nl_cont                = 1        # Align continuation backslashes at end of longest line
align_pp_define_span            = 2        # Align defines within 2 lines
align_pp_define_gap             = 2        # Gap for define alignment
pp_if_indent_code               = false
#===============================================================================
# Sort includes options
#===============================================================================
# Keep sorting disabled unless specifically requested, as it can break code.
mod_sort_include                = false
mod_sort_using                  = false
mod_sort_import                 = false

# Define categories if sorting is enabled (example using common conventions)
# include_category_0            = '<.*>'   # System headers <>
# include_category_1            = '"[a-zA-Z].*"' # Project headers ""

#===============================================================================
# Use or Do not Use options
#===============================================================================
indent_func_call_param          = true
use_indent_func_call_param      = true     # Ensure indent_func_call_param logic is used
use_indent_continue_only_once   = true     # Try to prevent double indent_continue on assignments + calls
use_options_overriding_for_qt_macros = true # Keep Qt formatting on by default

#===============================================================================
# Warn levels - Keep defaults unless issues arise
#===============================================================================
warn_level_tabs_found_in_verbatim_string_literals = 2

#===============================================================================
# Debug options - Keep defaults
#===============================================================================
# debug_max_number_of_loops       = 0
# debug_line_number_to_protocol   = 0
# debug_timeout                   = 0
# debug_truncate                  = 0
# debug_sort_the_tracks           = true
# debug_decode_the_flags          = false
# debug_use_the_exit_function_pop = true
# debug_print_version             = false
# set_numbering_for_html_output   = false

#===============================================================================
# Custom types/keywords (Add if needed)
#===============================================================================
# Example: Treat MyCustomType as a standard type for spacing/alignment
# type MyCustomType

# Example: Treat my_macro as a function call for spacing
# set func_call_user my_macro